---
layout: post
title: "Week 10"
---

For this week, our group has mostly been sorting through viable issues to contribute to on MuseScore. This also includes communicating with the admins of the project on Discord to both better undertstand the enviornment and community, as well as deciding what is more 'beginner friendly' that we could not only try to resolve, but be assigned issues as well. Another critical element of sorting through these issues also includes 'issue triage': that is, looking through the issues and making sure that we can reproduce the issue, and if not, making sure we let the user know, while stating the precise version, IDE, and OS we used when unable to recreate it. 

A big part of the last two weeks had been getting as familiar as possible with the application, including how an average user might go about interacting with it, and the capabilities and limitations it posses. Although there is much of the code that remains difficult to fully understand, we have made headway in getting our personal enviornments setup and compiling the software succesfully, which seems like the first step in better understanding how the backend functions. Of course starting to actively contribute and make pull requests are the primary focus of this week and the coming weeks, and will be the most challenging element. One thought process our group seems to be following is in easing into the nature of the pull requests/issues we tackle. Instead of dealing with more esoteric/complicated issues off the bat, we have thought about doing more creative, even 'thematic', requests before going for more hard code related problems. An example we have been looking into is the request to create a 'cannon' as an instrument within MuseScore (as featured in orchestral music by the likes of Tchaikovsky and others). The best part about starting with this as opposed to other types of issues is that there are clear and easy to follow frameworks on how to go about creating this. While a lot of issues require a more comprehensive understanding on how different elements of the code interact, this allows us to more get familiarized with the process of contributing without such a need.
